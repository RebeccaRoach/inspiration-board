{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","className","text","emoji","getUnicode","onClick","onDelete","id","NewCardForm","useState","content","setContent","onInputChange","event","contentCopy","target","name","value","onSubmit","preventDefault","onAddCard","alert","htmlFor","type","placeholder","onChange","Board","allCards","cardsList","map","card","key","errorMessage","App","API_URL_BASE","setCardsList","setErrorMessage","useEffect","axios","get","then","response","apiCardsList","data","catch","error","message","url","boardName","delete","cardsListCopy","i","length","splice","cause","post","newCard","unshift","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.31cb123f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nconst Card = props => {  \n\n  const onDeleteClick = () => {\n    props.onDelete(props.id);\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card__content\">\n        <p className=\"card__content-text\">{props.text}</p>\n\n        {/* display emoji if one is defined */}\n        { props.emoji ? \n          <p className=\"card__content-emoji\">{emoji.getUnicode(props.emoji)}</p> : null\n        }\n      </div>\n      <button className=\"card__delete\" onClick={onDeleteClick}>X</button>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  text: PropTypes.string.isRequired,\n  emoji: PropTypes.string,\n  onDelete: PropTypes.func.isRequired\n};\n\nexport default Card;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCardForm.css';\n\nconst NewCardForm = props => {\n\n  const [content, setContent] = useState({\n    text: \"\",\n    emoji: \"\"\n  });\n\n  const onInputChange = event => {\n    const contentCopy = {...content};\n    contentCopy[event.target.name] = event.target.value;\n    setContent(contentCopy);\n  }\n\n  const onSubmit = event => {\n    event.preventDefault();\n\n    // to ensure users can never send a bad request\n    if (content.text === \"\") {\n      alert(\"To post your note, first enter text.\");\n      return;\n    };\n\n    props.onAddCard(content);\n\n    // clear text fields for next submission\n    setContent({\n      text: \"\",\n      emoji: \"\"\n    });\n  }\n\n  return (\n      <form className=\"new-card-form\" onSubmit={onSubmit}>\n        <header className=\"new-card-form__header\">Post a Note</header>\n        <div className=\"new-card-form__form\">\n          <label htmlFor=\"text\" className=\"new-card-form__form-label\">Text</label>\n          <input\n            className=\"new-card-form__form-textarea \"\n            type=\"text\"\n            name=\"text\"\n            placeholder=\"Your text here\"\n            value={content.text}\n            onChange={onInputChange}\n          />\n          <label htmlFor=\"emoji\" className=\"new-card-form__form-label\">Emoji</label>\n          <input\n            className=\"new-card-form__form-textarea\"\n            type=\"text\"\n            name=\"emoji\"\n            placeholder=\"Emoji name\"\n            value={content.emoji}\n            onChange={onInputChange}\n          />\n          <input type=\"submit\" value=\"Submit\" className=\"new-card-form__form-button\"/>\n      </div>\n    </form>\n  )\n}\n\nNewCardForm.propTypes = {\n  onAddCard: PropTypes.func.isRequired,\n};\n\nexport default NewCardForm;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n\nconst Board = props => {\n\n  const allCards = (props.cardsList.map((card) => {\n    return <Card \n              key={card.card.id}\n              id={card.card.id}\n              text={card.card.text}\n              emoji={card.card.emoji}\n              onDelete={props.onDelete}\n            />\n  }));\n\n  return (\n    <div className=\"board\">\n      {props.errorMessage ? <ul className=\"validation-errors-display\"><li className=\"validation-errors-display__list\">{props.errorMessage}</li></ul> : ''}\n      {allCards}\n      <NewCardForm onAddCard={props.onAddCard}/>\n    </div>\n  )\n}\n\nBoard.propTypes = {\n  cardsList: PropTypes.arrayOf(PropTypes.object),\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired,\n  errorMessage: PropTypes.string,\n  onDelete: PropTypes.func.isRequired,\n  onAddCard: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport axios from 'axios';\n\nconst App = () => {\n\n  const API_URL_BASE = \"https://inspiration-board.herokuapp.com/boards/Becca-Jessica/cards\";\n\n  const [cardsList, setCardsList] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const onDelete = id => {\n    axios.delete(\"https://inspiration-board.herokuapp.com/cards/\" + id)\n      .then(() => {\n        const cardsListCopy = [...cardsList];\n        for (let i = 0; i < cardsListCopy.length; i++) {\n          if (id === cardsListCopy[i].card.id) {\n            cardsListCopy.splice(i, 1);\n            setCardsList(cardsListCopy);\n            return;\n          }\n        }\n        setErrorMessage('');\n      })\n      .catch((error) => {        \n        setErrorMessage(\"Card ID #\" + id + \": \" + error.cause);\n      });    \n  }\n\n  const onAddCard = card => {\n    axios.post(API_URL_BASE, card)\n      .then((response) => {\n        const cardsListCopy = [...cardsList];\n        const id = response.data.card.id;\n        const newCard = {\n          id: id,\n          text: card.text,\n          emoji: card.emoji\n        }\n        cardsListCopy.unshift({\"card\": newCard });\n        setCardsList(cardsListCopy);\n        setErrorMessage('');\n      })\n      .catch((error) => {\n        setErrorMessage(\"error: \" + error.cause);\n      })    \n    }\n\n  useEffect(() => {\n    axios.get(API_URL_BASE)\n      .then((response) => {        \n        const apiCardsList = response.data.map(card => {\n          return card;\n        });\n        setCardsList(apiCardsList);\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n      });\n  }, []);\n  \n\n  return (\n    <section>\n      <header className=\"header\">\n        <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n      </header>\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/boards/\"\n        boardName={\"Becca-Jessica\"}\n        cardsList={cardsList} \n        errorMessage={errorMessage} \n        onDelete={onDelete} \n        onAddCard={onAddCard}\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}